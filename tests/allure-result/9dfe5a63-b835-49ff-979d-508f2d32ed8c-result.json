{"name": "Puedo seleccionar un radio button.", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (75, 654)\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n\tGetHandleVerifier [0x005C34A3+25059]\n\t(No symbol) [0x0054CEA4]\n\t(No symbol) [0x0042BEC3]\n\t(No symbol) [0x00475D37]\n\t(No symbol) [0x00474189]\n\t(No symbol) [0x00471DAD]\n\t(No symbol) [0x004710AF]\n\t(No symbol) [0x00465FD7]\n\t(No symbol) [0x00491EFC]\n\t(No symbol) [0x00465A24]\n\t(No symbol) [0x00492194]\n\t(No symbol) [0x004AB51E]\n\t(No symbol) [0x00491C96]\n\t(No symbol) [0x00463FAC]\n\t(No symbol) [0x00464F3D]\n\tGetHandleVerifier [0x008B5613+3113811]\n\tGetHandleVerifier [0x008CA2DA+3199002]\n\tGetHandleVerifier [0x008C2AB2+3168242]\n\tGetHandleVerifier [0x00663310+680016]\n\t(No symbol) [0x005557ED]\n\t(No symbol) [0x00552A98]\n\t(No symbol) [0x00552C35]\n\t(No symbol) [0x00545890]\n\tBaseThreadInitThunk [0x766DFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x76FB809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x76FB806E+238]", "trace": "sandbox_page = <pages.sandbox_page.SandboxPage object at 0x0000023A34715CD0>\n\n    @allure.title(\"Puedo seleccionar un radio button.\")\n    @allure.epic(\"Interfaz Web\")\n    @allure.feature(\"Radio Buttons\")\n    @allure.story(\"El usuario puede seleccionar un radio button\")\n    @allure.testcase(\"IS-140\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.sandbox\n    def test_elegir_radio_button(sandbox_page):\n        opcion_radio_button = \"No\"\n        with allure.step(\n            f\"Dado que navego al sandbox y selecciono el radio button que dice {opcion_radio_button}\"\n        ):\n            sandbox_page.navigate_sandbox()\n>           sandbox_page.select_radio_button(opcion_radio_button)\n\ntest_sandbox.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\sandbox_page.py:82: in select_radio_button\n    self.select_element(radio_button_locator)\n..\\pages\\base_page.py:47: in select_element\n    element.click()\n..\\TestEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\TestEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\TestEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023A33D32390>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76FB809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76FB806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (75, 654)\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005C34A3+25059]\nE       \t(No symbol) [0x0054CEA4]\nE       \t(No symbol) [0x0042BEC3]\nE       \t(No symbol) [0x00475D37]\nE       \t(No symbol) [0x00474189]\nE       \t(No symbol) [0x00471DAD]\nE       \t(No symbol) [0x004710AF]\nE       \t(No symbol) [0x00465FD7]\nE       \t(No symbol) [0x00491EFC]\nE       \t(No symbol) [0x00465A24]\nE       \t(No symbol) [0x00492194]\nE       \t(No symbol) [0x004AB51E]\nE       \t(No symbol) [0x00491C96]\nE       \t(No symbol) [0x00463FAC]\nE       \t(No symbol) [0x00464F3D]\nE       \tGetHandleVerifier [0x008B5613+3113811]\nE       \tGetHandleVerifier [0x008CA2DA+3199002]\nE       \tGetHandleVerifier [0x008C2AB2+3168242]\nE       \tGetHandleVerifier [0x00663310+680016]\nE       \t(No symbol) [0x005557ED]\nE       \t(No symbol) [0x00552A98]\nE       \t(No symbol) [0x00552C35]\nE       \t(No symbol) [0x00545890]\nE       \tBaseThreadInitThunk [0x766DFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x76FB809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x76FB806E+238]\n\n..\\TestEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "steps": [{"name": "Dado que navego al sandbox y selecciono el radio button que dice No", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (75, 654)\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n\tGetHandleVerifier [0x005C34A3+25059]\n\t(No symbol) [0x0054CEA4]\n\t(No symbol) [0x0042BEC3]\n\t(No symbol) [0x00475D37]\n\t(No symbol) [0x00474189]\n\t(No symbol) [0x00471DAD]\n\t(No symbol) [0x004710AF]\n\t(No symbol) [0x00465FD7]\n\t(No symbol) [0x00491EFC]\n\t(No symbol) [0x00465A24]\n\t(No symbol) [0x00492194]\n\t(No symbol) [0x004AB51E]\n\t(No symbol) [0x00491C96]\n\t(No symbol) [0x00463FAC]\n\t(No symbol) [0x00464F3D]\n\tGetHandleVerifier [0x008B5613+3113811]\n\tGetHandleVerifier [0x008CA2DA+3199002]\n\tGetHandleVerifier [0x008C2AB2+3168242]\n\tGetHandleVerifier [0x00663310+680016]\n\t(No symbol) [0x005557ED]\n\t(No symbol) [0x00552A98]\n\t(No symbol) [0x00552C35]\n\t(No symbol) [0x00545890]\n\tBaseThreadInitThunk [0x766DFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x76FB809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x76FB806E+238]\n\n", "trace": "  File \"C:\\Users\\Katherine Gomez\\Documents\\Documentos\\QA\\Selenium y Python\\tests\\test_sandbox.py\", line 98, in test_elegir_radio_button\n    sandbox_page.select_radio_button(opcion_radio_button)\n  File \"C:\\Users\\Katherine Gomez\\Documents\\Documentos\\QA\\Selenium y Python\\pages\\sandbox_page.py\", line 82, in select_radio_button\n    self.select_element(radio_button_locator)\n  File \"C:\\Users\\Katherine Gomez\\Documents\\Documentos\\QA\\Selenium y Python\\pages\\base_page.py\", line 47, in select_element\n    element.click()\n  File \"C:\\Users\\Katherine Gomez\\Documents\\Documentos\\QA\\Selenium y Python\\TestEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\Katherine Gomez\\Documents\\Documentos\\QA\\Selenium y Python\\TestEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Katherine Gomez\\Documents\\Documentos\\QA\\Selenium y Python\\TestEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Katherine Gomez\\Documents\\Documentos\\QA\\Selenium y Python\\TestEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1733970185722, "stop": 1733970186917}], "start": 1733970185722, "stop": 1733970186931, "uuid": "c6f7f6ba-cac0-49e8-8aa1-e8ffa0ff4e55", "historyId": "f9ff22498bf2e6fc09edbfc52aac7ecc", "testCaseId": "f9ff22498bf2e6fc09edbfc52aac7ecc", "fullName": "tests.test_sandbox#test_elegir_radio_button", "labels": [{"name": "severity", "value": "normal"}, {"name": "epic", "value": "Interfaz Web"}, {"name": "feature", "value": "Radio Buttons"}, {"name": "story", "value": "El usuario puede seleccionar un radio button"}, {"name": "tag", "value": "sandbox"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_sandbox"}, {"name": "host", "value": "LAPTOP-5DDISQGQ"}, {"name": "thread", "value": "6060-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_sandbox"}], "links": [{"type": "tms", "url": "IS-140", "name": "IS-140"}]}